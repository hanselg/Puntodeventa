unit DialogCobroPesosND;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, cxGraphics, Menus, cxLookAndFeelPainters, cxStyles, cxCustomData,
  cxFilter, cxData, cxDataStorage, cxEdit, DB, cxDBData, cxGridLevel, cxClasses,
  cxControls, cxGridCustomView, cxGridCustomTableView, cxGridTableView,
  cxGridDBTableView, cxGrid, StdCtrls, cxButtons, cxTextEdit, dxLayoutControl,
  cxContainer, cxMaskEdit, cxDropDownEdit, cxCurrencyEdit, cxButtonEdit,
  cxCheckBox, cxLookupEdit, cxDBLookupEdit, cxDBExtLookupComboBox;

type
  TfrmDialogCobroPesosND = class(TForm)
    dxLayoutControl1Group_Root: TdxLayoutGroup;
    dxLayoutControl1: TdxLayoutControl;
    dbDatos: TcxGridDBTableView;
    lvDatos: TcxGridLevel;
    cgDatos: TcxGrid;
    dxLayoutControl1Item4: TdxLayoutItem;
    dxLayoutControl1Group2: TdxLayoutGroup;
    btcancelar: TcxButton;
    dxLayoutControl1Item5: TdxLayoutItem;
    btaceptar: TcxButton;
    dxLayoutControl1Item6: TdxLayoutItem;
    dsDatos: TDataSource;
    dbDatosDescripcion: TcxGridDBColumn;
    dbDatosPagado: TcxGridDBColumn;
    dbDatosMoneda: TcxGridDBColumn;
    LcPendiente: TdxLayoutGroup;
    EdPendiente: TcxCurrencyEdit;
    dxLayoutControl1Item1: TdxLayoutItem;
    LcDevuelta: TdxLayoutGroup;
    EdCobrado: TcxCurrencyEdit;
    dxLayoutControl1Item2: TdxLayoutItem;
    EdDevuelta: TcxCurrencyEdit;
    dxLayoutControl1Item3: TdxLayoutItem;
    dxLayoutControl1Group1: TdxLayoutGroup;
    dxLayoutControl1Group3: TdxLayoutGroup;
    dxLayoutControl1Group4: TdxLayoutGroup;
    dxLayoutControl1Group5: TdxLayoutGroup;
    dxLayoutControl1Item8: TdxLayoutItem;
    dxLayoutControl1Item9: TdxLayoutItem;
    dxLayoutControl1Item10: TdxLayoutItem;
    dxLayoutControl1Item11: TdxLayoutItem;
    dxLayoutControl1Group7: TdxLayoutGroup;
    edNumeroCK: TcxCurrencyEdit;
    edNumeroTAR: TcxCurrencyEdit;
    dxLayoutControl1Item7: TdxLayoutItem;
    cbExtBancoTarjeta: TcxExtLookupComboBox;
    cbExtBancoCheque: TcxExtLookupComboBox;
    procedure btaceptarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure cgDatosFocusedViewChanged(Sender: TcxCustomGrid; APrevFocusedView,
      AFocusedView: TcxCustomGridView);
    procedure cgDatosExit(Sender: TObject);
    procedure cgDatosEnter(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    { Private declarations }
    Accion  : String;
  public
    { Public declarations }
    procedure Run;
    procedure buscar;
  end;

var
  frmDialogCobroPesosND: TfrmDialogCobroPesosND;
  AdentroGrid : Boolean;

implementation

uses ActionsDM, DataModule, PuntoVentaND, Main;

{$R *.dfm}

procedure TfrmDialogCobroPesosND.cgDatosEnter(Sender: TObject);
begin
// buscar;
 AdentroGrid := True;
end;


procedure TfrmDialogCobroPesosND.cgDatosExit(Sender: TObject);
begin
 buscar;
 AdentroGrid := False;
end;


procedure TfrmDialogCobroPesosND.cgDatosFocusedViewChanged(Sender: TcxCustomGrid;
  APrevFocusedView, AFocusedView: TcxCustomGridView);
begin
// buscar;
end;


procedure TfrmDialogCobroPesosND.FormCreate(Sender: TObject);
Var BuscarEn :TDataset;
begin
end;

procedure TfrmDialogCobroPesosND.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (key = Vk_Down) and (not AdentroGrid) then
     PostMessage(Handle, Wm_NextDlgCtl, 0, 0);
  if (key = 13) then
     PostMessage(Handle, Wm_NextDlgCtl, 0, 0);
  if (key = Vk_Up) and (not AdentroGrid) then
     PostMessage(Handle, Wm_NextDlgCtl, 1, 0);
  if (key = 27) then
  begin
   Close;
  end;
end;


procedure TfrmDialogCobroPesosND.FormShow(Sender: TObject);
begin
  If (dm.DBSAP.Connected = False) Then
  begin
    dm.DBSAP.Close;
    dm.DBSAP.Open;
  end;  
  With DM.qryBanco, sql do
  begin
    Close;
    Clear;
    Text :='Select BankCode,BankName from [SerSap].LAB_REFERENCIA.dbo.ODSC ';
    Open;
  end;
end;

procedure TfrmDialogCobroPesosND.btaceptarClick(Sender: TObject);
begin
  Accion:='';
  If (frmMain.frmTmpND.tarjetac > 0) Then
  begin
    If cbExtBancoTarjeta.Text = EmptyStr Then
    begin
       Raise exception.CreateFmt('Debe registrar el Banco de la Tarjeta. Verifique.', []);
       cbExtBancoTarjeta.SetFocus;
    end;
    If edNumeroTAR.Text=EmptyStr Then
    begin
       Raise exception.CreateFmt('Debe registrar número de la Tarjeta. Verifique.', []);
       edNumeroTAR.SetFocus;
    end;
  end;
  if  (frmMain.frmTmpND.cheque > 0) then
  begin
    If cbExtBancoCheque.Text = EmptyStr Then
    begin
       Raise exception.CreateFmt('Debe registrar el Banco del cheque. Verifique.', []);
       cbExtBancoCheque.SetFocus;
    end;
    If edNumeroCK.Text=EmptyStr Then
    begin
       Raise exception.CreateFmt('Debe registrar número del cheque. Verifique.', []);
       edNumeroCK.SetFocus;
    end;
  end;
  if (frmMain.frmTmpND.qrEntradaPacienteDESCUENTO.Value > 0) and
     (frmMain.frmTmpND.efectivo = 0) and
     (frmMain.frmTmpND.qrEntradaPacienteOrigen.value = DM.qrParametroGrupoPriv.Value)    then
  begin
      frmMain.frmTmpND.CancelarCobro;
      Raise exception.CreateFmt('Descuento sólo aplica a pagos en efectivo. Por Favor Verifique.', []);
  end;
    If DM.Mensaje('Desea Generar el Recibo Para Este Ingreso?',mb_yesno) = id_yes Then
    Begin
        If frmMain.frmTmpND.buscar_valores then
        begin
            If (DM.Redondeo(frmMain.frmTmpND.sumatotal + frmMain.frmTmpND.efectivo) > 0) Then
            Begin
                frmMain.frmTmpND.TipoCob := 'RI';
                frmMain.frmTmpND.correccion;
            end
            Else
            begin
                frmMain.frmTmpND.CancelarCobro;
    //                  Raise exception.CreateFmt('El Cobro NO Fue Generado. NO Registro Ningun Monto Cobrado. Por Favor Verifique.', []);
                DM.Info('El Cobro NO Fue Generado. NO Registro Ningun Monto Cobrado. Por Favor Verifique.');
            end;
        end
        Else
        begin
            frmMain.frmTmpND.CancelarCobro;
            Raise exception.CreateFmt('El Total Cobrado Es Mayor Que El Total Pendiente. Por Favor Verifique.', []);
        end;
      End
    Else
      Begin
        frmMain.frmTmpND.CancelarCobro;
        Raise exception.CreateFmt('La Generacion del Recibo Fue Abortada por el Usuario. Por Favor Verifique.', []);
    //          DM.Info('La Generacion del Recibo Fue Abortada por el Usuario. Por Favor Verifique.');
      End;
      Accion:='S';
      Close;
{  else
    Begin
      frmMain.frmTmpND.CancelarCobro;
      Raise exception.CreateFmt('El Cobro Ha Sido Cancelado por el Usuario. Por Favor Verifique.', []);
//      DM.Info('El Cobro Ha Sido Cancelado por el Usuario. Por Favor Verifique.');
    end;
}
end;

procedure TfrmDialogCobroPesosND.buscar;
begin
  frmMain.frmTmpND.buscar_valores;
  EdCobrado.TabStop               := False;
  EdDevuelta.TabStop              := False;
  EdPendiente.TabStop             := False;
  EdCobrado.Properties.ReadOnly   := True;
  EdDevuelta.Properties.ReadOnly  := True;
  EdPendiente.Properties.ReadOnly := True;
  EdPendiente.Value               := frmMain.frmTmpND.qrEntradaPacienteTotalPendiente.Value;
  EdCobrado.Value                 := frmMain.frmTmpND.sumatotal + frmMain.frmTmpND.efectivo;
  if frmMain.frmTmpND.devuelta > 0 then
    EdDevuelta.Value                := frmMain.frmTmpND.devuelta
  else
    frmMain.frmTmpND.devuelta         := 0;
  EdCobrado.Refresh;
  EdDevuelta.Refresh;
  EdPendiente.Refresh;
end;

procedure TfrmDialogCobroPesosND.Run;
begin
  buscar;
  showmodal;
   If  (ModalResult = mrCancel) and (Accion<>'S') Then
   Begin
      frmMain.frmTmpND.CancelarCobro;
      Raise exception.CreateFmt('El Cobro Ha Sido Cancelado por el Usuario. Por Favor Verifique.', []);
//      DM.Info('El Cobro Ha Sido Cancelado por el Usuario. Por Favor Verifique.');
   end;
end;
end.


