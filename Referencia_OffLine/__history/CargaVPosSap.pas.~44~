unit CargaVPosSap;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Menus, cxLookAndFeelPainters, dxLayoutControl, StdCtrls, cxButtons,
  cxCurrencyEdit, cxTextEdit, cxMaskEdit, cxDropDownEdit, cxCalendar,
  cxContainer, cxEdit, cxGroupBox, cxRadioGroup, cxControls,ADODB,pptypes,
  cxGraphics, cxLookupEdit, cxDBLookupEdit, cxDBLookupComboBox, ppStrtch,
  ppRichTx, ppBands, ppClass, ppCtrls, ppVar, ppPrnabl, ppCache, ppComm,
  ppRelatv, ppProd, ppReport, DB, ppDB, ppDBPipe, JvMemoryDataset, dlgMensajes,
  cxDBExtLookupComboBox;

type
  TfrmCargaVPosSap = class(TForm)
    dxLayoutControl3: TdxLayoutControl;
    btaceptarcuadre: TcxButton;
    btcancelarcuadre: TcxButton;
    dxLayoutGroup2: TdxLayoutGroup;
    dxLayoutControl3Group14: TdxLayoutGroup;
    GrupoParametros: TdxLayoutGroup;
    GroupSaldo: TdxLayoutGroup;
    botonescuadre: TdxLayoutGroup;
    dxLayoutControl3Item31: TdxLayoutItem;
    dxLayoutControl3Item10: TdxLayoutItem;
    Label2: TLabel;
    GrupoSucursales: TdxLayoutGroup;
    dxLayoutControl3Item42: TdxLayoutItem;
    GrupoToma: TdxLayoutGroup;
    FechaIni: TcxDateEdit;
    dxLayoutControl3Item2: TdxLayoutItem;
    FechaFin: TcxDateEdit;
    dxLayoutControl3Item33: TdxLayoutItem;
    cbExtCliente: TcxExtLookupComboBox;
    dxLayoutControl3Item1: TdxLayoutItem;
    cbExtGrupoCliente: TcxExtLookupComboBox;
    procedure FormShow(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    Function  ActCargaVPosSap  : Boolean;
    Function  ActPreFacturaSap : Boolean;
  private
    { Private declarations }
    CodCliente  : String;
    CodGrupo    : String;
  public
    { Public declarations }
    procedure Run;
  end;

var
  frmCargaVPosSap: TfrmCargaVPosSap;
  Seleccion : string;

implementation

uses ActionsDM, DataModule, DatosClientesPlanes, Main;

{$R *.dfm}

procedure TfrmCargaVPosSap.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if (key = Vk_Down) then
     PostMessage(Handle, Wm_NextDlgCtl, 0, 0);
  if (key = 13) then
     PostMessage(Handle, Wm_NextDlgCtl, 0, 0);
  if (key = Vk_Up)  then
     PostMessage(Handle, Wm_NextDlgCtl, 1, 0);
  if (key = 27) then
  begin
   Close;
  end;
end;

procedure TfrmCargaVPosSap.FormShow(Sender: TObject);
begin
  If (dm.DBSAP.Connected = False) Then
  begin
    dm.DBSAP.Close;
    dm.DBSAP.Open;
  end;
  if not DM.qrGrupoCliente.Active then
    DM.qrGrupoCliente.Open;
    
  if not DM.qrCliente.Active then
    DM.qrCliente.Open;
end;

procedure TfrmCargaVPosSap.Run;
Var Muestrano_Ant,Mensaje     : String;
    qconsulta                 : TADOQuery;
    qrVerificaCliente         : TADOQuery;
begin
 showmodal;
 if ModalResult = mrOk then
 begin
       If (cbExtCliente.Text = EmptyStr) And (cbExtGrupoCliente.Text = EmptyStr) then
       Begin
          EtMensajeDlg('Debe Seleccionar el Cliente o el Grupo.  Verifique.',etConfirmacion,[etOk],1,dm.Imagenes.Items[5].Bitmap,true);
          cbExtCliente.SetFocus;
          Exit;
       end;
       If FechaIni.Text = EmptyStr then
       Begin
          EtMensajeDlg('Debe Seleccionar Fecha de Inicio.  Verifique.',etConfirmacion,[etOk],1,dm.Imagenes.Items[5].Bitmap,true);
          FechaIni.SetFocus;
          Exit;
       end;
       If FechaFin.Text = EmptyStr then
       Begin
          EtMensajeDlg('Debe Seleccionar Fecha Fin.  Verifique.',etConfirmacion,[etOk],1,dm.Imagenes.Items[5].Bitmap,true);
          FechaFin.SetFocus;
          Exit;
       end;

       If MessageDlg('Desea Cargar Ventas del Cliente '+cbExtCliente.Text+'?', mtWarning, [mbYes,mbNo], 0) = mrYes then
       begin
          Application.ProcessMessages;
          If cbExtCliente.Text<>EmptyStr then
             CodCliente:= cbExtCliente.EditValue
          else
             CodCliente:= EmptyStr;

          If cbExtGrupoCliente.Text<>EmptyStr then
             CodGrupo:= cbExtGrupoCliente.EditValue
          else
             CodGrupo:= EmptyStr;

// Crea en Base de Datos Interfaz en Tabla Pedido y PedidoDetalle
// Valida Si el Cliente Existe en SAP
          If (CodCliente = '') and (CodGrupo<>'') Then
          begin
             qconsulta := DM.NewQuery;
             With qconsulta, sql do
             begin
                Close;
                Text := ' Select Distinct ClienteID,ClienteNombre from PtEntradaPaciente '+#13+
                        ' Where Origen = '+#39+CodGrupo+#39+' And Estatus='+#39+'0'+#39+' And Estatus_Sap='+#39+'A'+#39+
                        ' And Transferido='+#39+'0'+#39+' And Fecha between '+#39+FormatDateTime('yyyymmdd', FechaIni.Date)+#39+
                        ' And '+#39+FormatDateTime('yyyymmdd', FechaFin.Date)+#39+' And RecID In (Select refrecid from ptentradapacientedetalle where Dataareaid='+#39+'ldr'+#39+')';
                Open;
             end;
            if (qconsulta.RecordCount > 0) then
            begin
             qconsulta.First;
             qrVerificaCliente := DM.NewQuery;
             Mensaje:=EmptyStr;
             While not qconsulta.eof do
             begin
                 With qrVerificaCliente, sql do
                 begin
                    Close;
                    Text := ' Select dbo.ObtCodCliPVAXSAP('+#39+qconsulta.Fieldbyname('ClienteID').AsString+#39+') As ClienteID ';
                    Open;
                    if (qrVerificaCliente.FieldByname('ClienteID').AsString = EmptyStr) Then
                    begin
                        Mensaje:=Mensaje+'Cliente ('+qconsulta.Fieldbyname('ClienteID').AsString+' '+qconsulta.Fieldbyname('ClienteNombre').AsString+').  No existe en SAP ó el codigo Anterior NO Customizado.'+#13;
                    end;
                 end;
                 qconsulta.Next;
             end;
            end;
          end;
//Fin validación de Clientes
// Valida Si Las pruebas facturadas existen en SAP
          If (CodCliente = '') and (CodGrupo<>'') Then
          begin
             qconsulta := DM.NewQuery;
             With qconsulta, sql do
             begin
                Close;
                Text := ' Select Distinct PruebaID,Descripcion from PtEntradaPacienteDetalle Where RefrecID in ('+#13+
                        ' Where Origen = '+#39+CodGrupo+#39+' And Estatus='+#39+'0'+#39+' And Estatus_Sap='+#39+'A'+#39+
                        ' And Transferido='+#39+'0'+#39+' And Fecha between '+#39+FormatDateTime('yyyymmdd', FechaIni.Date)+#39+
                        ' And '+#39+FormatDateTime('yyyymmdd', FechaFin.Date)+#39+')';
                Open;
             end;
            if (qconsulta.RecordCount > 0) then
            begin
             qconsulta.First;
             qrVerificaCliente := DM.NewQuery;
             Mensaje:=EmptyStr;
             While not qconsulta.eof do
             begin
                 With qrVerificaCliente, sql do
                 begin
                    Close;
                    Text := ' Select dbo.ObtCodCliPVAXSAP('+#39+qconsulta.Fieldbyname('ClienteID').AsString+#39+') As PruebaID ';
                    Open;
                    if (qrVerificaCliente.FieldByname('PruebaID').AsString = EmptyStr) Then
                    begin
                        Mensaje:=Mensaje+'Servicio ('+qconsulta.Fieldbyname('PruebaID').AsString+' '+qconsulta.Fieldbyname('Descripcion').AsString+').  No existe en SAP ó el codigo Anterior NO Customizado.'+#13;
                    end;
                 end;
                 qconsulta.Next;
             end;
            end;
//Fin validación de pruebas
            If Mensaje <> EmptyStr then
            begin
                Showmessage(Mensaje);
                Exit;
            end;

            FreeAndNil(qrVerificaCliente);
            FreeAndNil(qconsulta);

          If Not ActCargaVPosSap Then
          begin
            if CodCliente <> '' then
            begin
              Raise exception.CreateFmt( ' NO Se Pudo Generar la carga del Cliente '+cbExtCliente.text+'.'+ #13 +
                                      ' Se Ha Generado Un Error en ActCargaVPosSap. '+ #13 +
                                      ' Por Favor, Intentelo Nuevamente.!!!', []);
            end
            else if (CodCliente ='') and (CodGrupo <> '') then
            begin
              Raise exception.CreateFmt( ' NO Se Pudo Generar la carga del Grupo Cliente '+cbExtGrupoCliente.text+'.'+ #13 +
                                      ' Se Ha Generado Un Error en ActCargaVPosSap. '+ #13 +
                                      ' Por Favor, Intentelo Nuevamente.!!!', []);
            end;
          end
          else
          begin
            if CodCliente <> '' then
              DM.Info('La carga del cliente '+cbExtCliente.Text+' fué realizada satisfactoriamente.')
            else if (CodCliente ='') and (CodGrupo<>'') then
              DM.Info('La carga del cliente '+cbExtGrupoCliente.Text+' fué realizada satisfactoriamente.');
          end;

          // Crea Pedido en Tabla Interfase Sap Tri_Pedido y Tri_Pedidodetalle
          If Not ActPreFacturaSap Then
          begin
            if CodCliente <> '' then
            begin
              Raise exception.CreateFmt( ' NO Se Pudo Generar la carga del Cliente '+cbExtCliente.text+'.'+ #13 +
                                      ' Se Ha Generado Un Error en ActPreFacturaSap. '+ #13 +
                                      ' Por Favor, Intentelo Nuevamente.',[]);
            end
            else if (CodCliente ='') and (CodGrupo<>'') then
            begin
              Raise exception.CreateFmt( ' NO Se Pudo Generar la carga del Grupo Cliente '+cbExtGrupoCliente.text+'.'+ #13 +
                                      ' Se Ha Generado Un Error en ActPreFacturaSap. '+ #13 +
                                            ' Por Favor, Intentelo Nuevamente.',[]);
            end;
          end
          else
          begin
            if CodCliente <> '' then
              DM.Info('La carga del cliente '+cbExtCliente.Text+' fué realizada a Pre-Factura Sap.')
            else if (CodCliente ='') and (CodGrupo<>'') then
              DM.Info('La carga del Grupo de Cliente '+cbExtGrupoCliente.Text+' fué realizada a Pre-Factura Sap.');
          end;
       end;
       end;
  end;
 end;
function TfrmCargaVPosSap.ActCargaVPosSap : Boolean;
begin
Result := False;
Try
  with  dm.sp_ActCargaVPosSap, Parameters do
  begin
    ParamByName('@GrupoID').Value       := CodGrupo;
    ParamByName('@Cte').Value           := CodCliente;
    ParamByName('@Fecha_Desde').Value   := FormatDateTime('yyyymmdd', FechaIni.Date);
    ParamByName('@Fecha_Hasta').Value   := FormatDateTime('yyyymmdd', FechaFin.Date);
    ExecProc;
    Result:= True;
  end;
  Except
    On E : Exception do
      ShowMessage(E.Message);
  End
end;
function TfrmCargaVPosSap.ActPreFacturaSap : Boolean;
begin
Result := False;
Try
  with  dm.ActPreFacturaSap, Parameters do
  begin
    ParamByName('@GrupoID').Value         := CodGrupo;
    ParamByName('@ClienteID').Value       := CodCliente;
    ParamByName('@FechaInicial').Value    := FormatDateTime('yyyymmdd', FechaIni.Date);
    ParamByName('@FechaFinal').Value      := FormatDateTime('yyyymmdd', FechaFin.Date);
    ExecProc;
    Result:= True;
  end;
  Except
    On E : Exception do
      ShowMessage(E.Message);
  End
end;

end.
